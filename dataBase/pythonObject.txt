파이썬 객체
- '어떻게 사용하는 가'보다는 '어떤 식으로 사용되는가'에 가까움

프로드램을 보며 시작해보자
- 입력 -> 프로세스 -> 출력

객체 지향
- 프로그램은 서로 협력하는 여러 개의 객체로 구성
- "전체 프로그램"이 아닌 각각의 객체가 마치 프로그램안의 "섬"같이 서로 협력하여 작동
- 프로그램은 함께 실행되는 여러 개의 객체로 구성 - 객체는 서로 기능들을 활용

객체
- 객체는 하나의 자족적인 코드와 데이터
- 객체 지향 접근의 요점은 문제를 이해가능한 작은 문제로 분할하여 접근(분할 정복 divide-and-conquer)
- 객체는 우리가 필요없는 세부사항들을 무시할 수 있도록 경계를 제공
- 우리는 객체를 계속 사용해 왔음: 문자열 객체, 정수형 객체, 딕셔너리 객체, 리스트 객체..
- 객체는 코드와 데이터의 집합체
- 객체는 세부사항을 감춤 - "프로그램의 나머지 부분"의 세부사항을 무시할 수 있게 해줌

정의
- 클래스 Class - 하나의 형식, 템플릿
- 메소드 Method or Message - 클래스 내에 정의된 기능
- 필드/속성 Field or attribute - 클래스 내의 데이터
- 객체/인스턴스 Obeject or Instance - 클래스의 한 인스턴스

용어) 클래스 Class
    어떤 물체(객체)의 특징(필드 또는 속성)과 행동(메소드, 연산 등의 기능) 등 추상적인 특성을 정의.
  클래스를 어떤 것의 특성을 설명하는 설계도 혹은 공장이러고도 이야기 함.
  예를 들어, 개라는 클래스는 품종 또는 털색깔(특성), 혹은 짖거나 앉는 행위(행동) 등 개들이 가지는 특성을 가짐


용어) 인스턴스 Instance
    클래스 안에서 인스턴스 혹은 특정 객체를 가질 수 있음.
  인스턴스란 실행 중 실제로 생성된 객체를 의미.프로그래머의 용어를 따르면, "래씨"라는 객체는 "개"라는
  클래스의 한 인스턴스임. 특저 객체의 특성들을 모아놓은 것을 상태라고 함. 객체는 클래스 안에서 정의된


용어) 메소드 Method
    객체의 능력. 언어로 따지면 메소드는 동사임. 랴시는 개로써 짖을 수 있는 능력이 있음.
  그래서 bark()"래씨"의 한 메소드가 됨. 이것 외에 다른 메소드들도 가질 수 있음.
  예를 들면 sit(), eat(), walk()또는 save_timmy()등. 프로그램 내에서는 메소드는 하나의 객체에만
  영향을 줄 수 있음. 모든 개는 짖을 수 있지만, 실제로 짖는 행위는 수행하는 개는 하나 밖에 없음.
  메소드오 ㅏ메시지는 자유롭게 바꾸어 부를 수 있음


  class PartyAnimal:
    x = 0

    def party(self):
    self.x = self.x+1
    print("So far",self.x)

  an = PartyAnimal()

  an.party()
  an.party()
  an.party()


dir()과 type() 다루기

기능을 찾는 한 방법
  - dir() 명령은 여러 기능들을 나열한다.
  - _표시되어있는 것들은 무시해도 된다. - 파이썬이 자체적으로 사용
  - 나머지는 객체가 실제로 수행할 수 있는 작업이다.
  - type()과 유사함 - 어떤 변수에 '대해서'말해준다.

ex
  class PartyAnimal:
    x = 0

    def party(self):
      self.x = self.x + 1
      print("So far",self.x)

    an = PartyAnimal()

    print("Type", type(an))
    print("Dir",dir(an))

  div()을 사용해서 새롭게 생성된 클래스의 '기능'을 찾을 수 있음.
  -> Type <class '_main_.PartyAnimal'>
  -> Dir ['_class_',...'party','x']

dir()를 문자열에 사용
  x = 'Hello there'
  dir(x)
  ['__add__', '__class__', '__contains__', '__delattr__',
  '__doc__', '__eq__', '__ge__', '__getattribute__',
  '__getitem__', '__getnewargs__', '__getslice__', '__gt__',
  '__hash__', '__init__', '__le__', '__len__', '__lt__',
  '__repr__', '__rmod__', '__rmul__', '__setattr__', '__str__',
  'capitalize', 'center', 'count', 'decode', 'encode', 'endswith',
  'expandtabs', 'find', 'index', 'isalnum', 'isalpha', 'isdigit',
  'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust',
  'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex',
  'rjust', 'rpartition', 'rsplit', 'rstrip', 'split',
  'splitlines', 'startswith', 'strip', 'swapcase', 'title',
  'translate', 'upper', 'zfill']


객체 생명 주기
  - 객체는 생성되고, 사용되어지고, 없어짐
  - 객체를 불러올 때 특별한 코드(메소드)가 존재
    : 생성되어 질 때(생성자)
    : 소멸되어 질 때(소멸자)
  - 생성자는 자주 사용
  - 소멸자는 거의 사용되지 않음

생성자
  - 생성자의 주된 목적은 인스턴스 변수가 객체가 생성될 대 적절한 초기값을 가지게 하는 것
  - 객체 지향 프로그래밍에서, 클래스의 생성자는 객체가 생성되어질 때 불러오는 문장

여러 인스턴스
  - 다수의 객체를 만들 수 있음 - 클래스가 그 형식의 틀을 제공
  - 별개의 객체들을 각자의 변수에 저장할 수 있음.
  - 이것을 동일 클래스의 다중 인스턴스라고 함.
  - 각각의 인스턴스는 자신만의 인스턴스 변수를 가지고 있음.

상속
  - 새로운 클래스를 만들 때 - 기존에 있던 클래스를 재사용하여 그 모든 기능을 상속받고
    조금 추가하여 새로운 클래스를 만들 수 있음
  - 저장하고 재사용하는 또 다른 형태
  - 한 번 작성하고 - 여러번 재사용
  - 새로운 클래스는 (child)이전 클래스(parent)의 모든 기능을 가지고 있음
    - 그리고 더 추가할 수 있음.

용어) 상속
  '하위 클래스'한 클래스의 특수한 버전이며, 상위 클래스의 속성과 행동을 상속하고, 자신의 것도 추가

정의
  - 클리스 Class - 형식 또는 템플릿
  - 속성 Attribute - 클래스 내의 변수
  - 메소드 Method - 클래스 내의 함수
  - 객체 Object - 클래스의 특정 인스턴스
  - 생성자 Constructor - 객체가 생성될 때 실행되는 코드
  - 계승 Inheritance - 기존의 클래스를 확장하여 새로운 클래스를 만드는 것

요약
  - 객체 지향 프로그래밍은 코드 재사용에 매우 구조화된 접근
  - 데이터와 기능들을 함께 묶어서 클래스 내에 여러 독립적인 인스턴스를 만들 수 있음
